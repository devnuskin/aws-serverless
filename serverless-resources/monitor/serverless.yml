# Service-specific monitoring resources.

# Before deploying:
# - Edit 3 XXXX entries under custom section below
# - Edit appropriate DynamoDB Index Monitoring sections, if a GSI exists

service: 
  name: ${self:custom.serviceName}-Monitoring

provider:
  name: aws
  region: ${opt:region, 'us-west-2'}
  stage: ${opt:stage, 'dev'}
  deploymentBucket:
    name: ${self:provider.stage}-${self:provider.region}-nuskin-sls
custom:
  # the name of the service to monitor (defined at the top of the service's serverless.yml file)
  serviceName: XXXX
  # the name of the function to monitor (defined under "functions" in the service's serverless.yml file)
  functionName: XXXX
  # the name of the DynamoDB table that will be monitored (assuming one DynamoDB table per service/API)
  tableName: XXXX
  # Topic ARN  -- Don't Change
  topicArn: ${ssm:/global/monitoring-sns-arn}
  
  # the name of the service's API Gateway API that will be monitored
  apiName: ${self:provider.stage}-${self:custom.serviceName}
  # the name of the Lambda function that will be monitored (assuming one Lambda function per service/API)
  lambdaName: ${self:custom.serviceName}-${self:provider.stage}-${self:custom.functionName}
resources:
  Resources:
    Dashboard:
      Type: 'AWS::CloudWatch::Dashboard'
      Properties:
        DashboardName: ${self:custom.serviceName}
        DashboardBody:
          'Fn::Join':
            - ''
            -
              - '{"widgets": ['
              # API Gateway alarms (specific to an API)
              - 'Fn::Join': ['', ['{"type": "metric", "properties": {"title": "API Gateway 4XX Count", "annotations": {"alarms": ["', Fn::GetAtt: [AlarmAPIGateway4XXCount, Arn], '"]}}},']]
              - 'Fn::Join': ['', ['{"type": "metric", "properties": {"title": "API Gateway 5XX Count", "annotations": {"alarms": ["', Fn::GetAtt: [AlarmAPIGateway5XXCount, Arn], '"]}}},']]
              - 'Fn::Join': ['', ['{"type": "metric", "properties": {"title": "API Gateway Count", "annotations": {"alarms": ["', Fn::GetAtt: [AlarmAPIGatewayCount, Arn], '"]}}},']]
              - 'Fn::Join': ['', ['{"type": "metric", "properties": {"title": "API Gateway Integration Latency", "annotations": {"alarms": ["', Fn::GetAtt: [AlarmAPIGatewayIntegrationLatency, Arn], '"]}}},']]
              # - 'Fn::Join': ['', ['{"type": "metric", "properties": {"view":"timeSeries","stacked":false,"metrics":[["AWS/ApiGateway","CacheHitCount","ApiName","${self:provider.stage}-Downtime","Stage","${self:provider.stage}",{"stat":"Sum","period":300}],[".","CacheMissCount",".",".",".",".",{"period":300,"stat":"Sum"}]],"period":300,"region":"${self:provider.region}","title":"API Gateway CacheHitCount, CacheMissCount"}},']]
              # Lambda alarms (specific to a function)
              - 'Fn::Join': ['', ['{"type": "metric", "properties": {"title": "Lambda Invocations", "annotations": {"alarms": ["', Fn::GetAtt: [AlarmLambdaInvocations, Arn], '"]}}},']]
              - 'Fn::Join': ['', ['{"type": "metric", "properties": {"title": "Lambda Errors", "annotations": {"alarms": ["', Fn::GetAtt: [AlarmLambdaErrors, Arn], '"]}}},']]
              - 'Fn::Join': ['', ['{"type": "metric", "properties": {"title": "Lambda Duration", "annotations": {"alarms": ["', Fn::GetAtt: [AlarmLambdaDuration, Arn], '"]}}},']]
              - 'Fn::Join': ['', ['{"type": "metric", "properties": {"title": "Lambda Throttles", "annotations": {"alarms": ["', Fn::GetAtt: [AlarmLambdaThrottles, Arn], '"]}}},']]
              # DynamoDB Table and GlobalSecondary Index Widgets (specific to a table and index)
              # Uncomment and Change to Correct Labels
              #- 'Fn::Join': ['', ['{"type": "metric", "properties": {"title": "XXXX-index DynamoDB Read Throttle Events", "annotations": {"alarms": ["', Fn::GetAtt: [AlarmDynamoDBReadThrottleEventsXXXX, Arn], '"]}}},']]
              #- 'Fn::Join': ['', ['{"type": "metric", "properties": {"title": "XXXX-index DynamoDB Write Throttle Events", "annotations": {"alarms": ["', Fn::GetAtt: [AlarmDynamoDBWriteThrottleEventsXXXX, Arn], '"]}}},']]
              # DynamoDB Table Widgets (specific to a table)
              - 'Fn::Join': ['', ['{"type": "metric", "properties": {"title": "DynamoDB Read Throttle Events", "annotations": {"alarms": ["', Fn::GetAtt: [AlarmDynamoDBReadThrottleEvents, Arn], '"]}}},']]
              - 'Fn::Join': ['', ['{"type": "metric", "properties": {"title": "DynamoDB Write Throttle Events", "annotations": {"alarms": ["', Fn::GetAtt: [AlarmDynamoDBWriteThrottleEvents, Arn], '"]}}}']] #this last one won't have a trailing comma
              - ']}'
    AlarmAPIGateway4XXCount:
      Type: 'AWS::CloudWatch::Alarm'
      Properties:
        ActionsEnabled: true
        AlarmActions:
          - ${self:custom.topicArn}
        AlarmDescription: ${self:custom.apiName} API Gateway 4XX Count
        AlarmName: ${self:custom.apiName}-apigateway-4xx-count
        ComparisonOperator: GreaterThanThreshold
        Dimensions:
          - Name: ApiName
            Value: ${self:custom.apiName}
        EvaluationPeriods: 1
        MetricName: 4XXError
        Namespace: AWS/ApiGateway
        Period: 60
        Statistic: Sum #SampleCount, Average, Sum, Minimum, or Maximum
        Threshold: 100
        TreatMissingData: notBreaching
    AlarmAPIGateway5XXCount:
      Type: 'AWS::CloudWatch::Alarm'
      Properties:
        ActionsEnabled: true
        AlarmActions:
          - ${self:custom.topicArn}
        AlarmDescription: ${self:custom.apiName} API Gateway 5XX Count
        AlarmName: ${self:custom.apiName}-apigateway-5xx-count
        ComparisonOperator: GreaterThanThreshold
        Dimensions:
          - Name: ApiName
            Value: ${self:custom.apiName}
        EvaluationPeriods: 1
        MetricName: 5XXError
        Namespace: AWS/ApiGateway
        Period: 60
        Statistic: Sum #SampleCount, Average, Sum, Minimum, or Maximum
        Threshold: 100
        TreatMissingData: notBreaching
    AlarmAPIGatewayCount:
      Type: 'AWS::CloudWatch::Alarm'
      Properties:
        ActionsEnabled: true
        AlarmActions:
          - ${self:custom.topicArn}
        AlarmDescription: ${self:custom.apiName} API Gateway Count
        AlarmName: ${self:custom.apiName}-apigateway-count
        ComparisonOperator: GreaterThanThreshold
        Dimensions:
          - Name: ApiName
            Value: ${self:custom.apiName}
        EvaluationPeriods: 1
        MetricName: Count
        Namespace: AWS/ApiGateway
        Period: 60
        Statistic: SampleCount #SampleCount, Average, Sum, Minimum, or Maximum
        Threshold: 300000
        TreatMissingData: notBreaching
    AlarmAPIGatewayIntegrationLatency:
      Type: 'AWS::CloudWatch::Alarm'
      Properties:
        ActionsEnabled: true
        AlarmActions:
          - ${self:custom.topicArn}
        AlarmDescription: ${self:custom.apiName} API Gateway Integration Latency
        AlarmName: ${self:custom.apiName}-apigateway-integration-latency
        ComparisonOperator: GreaterThanThreshold
        Dimensions:
          - Name: ApiName
            Value: ${self:custom.apiName}
        EvaluationPeriods: 3
        MetricName: IntegrationLatency
        Namespace: AWS/ApiGateway
        Period: 60
        Statistic: Average #SampleCount, Average, Sum, Minimum, or Maximum
        Threshold: 5000
        TreatMissingData: notBreaching
    AlarmLambdaInvocations:
      Type: 'AWS::CloudWatch::Alarm'
      Properties:
        ActionsEnabled: true
        AlarmActions:
          - ${self:custom.topicArn}
        AlarmDescription: ${self:custom.apiName} Lambda Invocations
        AlarmName: ${self:custom.apiName}-lambda-invocations
        ComparisonOperator: GreaterThanThreshold
        Dimensions:
          - Name: FunctionName
            Value: ${self:custom.lambdaName}
        EvaluationPeriods: 1
        MetricName: Invocations
        Namespace: AWS/Lambda
        Period: 60
        Statistic: Sum #SampleCount, Average, Sum, Minimum, or Maximum
        Threshold: 1000
        TreatMissingData: notBreaching
    AlarmLambdaErrors:
      Type: 'AWS::CloudWatch::Alarm'
      Properties:
        ActionsEnabled: true
        AlarmActions:
          - ${self:custom.topicArn}
        AlarmDescription: ${self:custom.apiName} Lambda Errors
        AlarmName: ${self:custom.apiName}-lambda-errors
        ComparisonOperator: GreaterThanThreshold
        Dimensions:
          - Name: FunctionName
            Value: ${self:custom.lambdaName}
        EvaluationPeriods: 1
        MetricName: Errors
        Namespace: AWS/Lambda
        Period: 60
        Statistic: Sum #SampleCount, Average, Sum, Minimum, or Maximum
        Threshold: 10
        TreatMissingData: notBreaching
    AlarmLambdaDuration:
      Type: 'AWS::CloudWatch::Alarm'
      Properties:
        ActionsEnabled: true
        AlarmActions:
          - ${self:custom.topicArn}
        AlarmDescription: ${self:custom.apiName} Lambda Duration
        AlarmName: ${self:custom.apiName}-lambda-duration
        ComparisonOperator: GreaterThanThreshold
        Dimensions:
          - Name: FunctionName
            Value: ${self:custom.lambdaName}
        EvaluationPeriods: 1
        MetricName: Duration
        Namespace: AWS/Lambda
        Period: 60
        Statistic: Average #SampleCount, Average, Sum, Minimum, or Maximum
        Threshold: 5000
        TreatMissingData: notBreaching
    AlarmLambdaThrottles:
      Type: 'AWS::CloudWatch::Alarm'
      Properties:
        ActionsEnabled: true
        AlarmActions:
          - ${self:custom.topicArn}
        AlarmDescription: ${self:custom.apiName} Lambda Throttles
        AlarmName: ${self:custom.apiName}-lambda-throttles
        ComparisonOperator: GreaterThanThreshold
        Dimensions:
          - Name: FunctionName
            Value: ${self:custom.lambdaName}
        EvaluationPeriods: 1
        MetricName: Throttles
        Namespace: AWS/Lambda
        Period: 60
        Statistic: Sum #SampleCount, Average, Sum, Minimum, or Maximum
        Threshold: 0
        TreatMissingData: notBreaching
    ######################################################################################
    # Note that DynamoDB indexes may not be monitored in addition to the underlying tables.
    ######################################################################################
    AlarmDynamoDBReadThrottleEvents:
      Type: 'AWS::CloudWatch::Alarm'
      Properties:
        ActionsEnabled: true
        AlarmActions:
          - ${self:custom.topicArn}
        AlarmDescription: ${self:custom.apiName} DynamoDB Read Throttle Events
        AlarmName: ${self:custom.apiName}-dynamodb-read-throttle-events
        ComparisonOperator: GreaterThanThreshold
        Dimensions:
          - Name: TableName
            Value: ${self:custom.tableName}
        EvaluationPeriods: 1
        MetricName: ReadThrottleEvents
        Namespace: AWS/DynamoDB
        Period: 60
        Statistic: Sum #SampleCount, Average, Sum, Minimum, or Maximum
        Threshold: 0
        TreatMissingData: notBreaching
    AlarmDynamoDBWriteThrottleEvents:
      Type: 'AWS::CloudWatch::Alarm'
      Properties:
        ActionsEnabled: true
        AlarmActions:
          - ${self:custom.topicArn}
        AlarmDescription: ${self:custom.apiName} DynamoDB Write Throttle Events
        AlarmName: ${self:custom.apiName}-dynamodb-write-throttle-events
        ComparisonOperator: GreaterThanThreshold
        Dimensions:
          - Name: TableName
            Value: ${self:custom.tableName}
        EvaluationPeriods: 1
        MetricName: WriteThrottleEvents
        Namespace: AWS/DynamoDB
        Period: 60
        Statistic: Sum #SampleCount, Average, Sum, Minimum, or Maximum
        Threshold: 0
        TreatMissingData: notBreaching
    ########################################################
    ####### Dynamo Secondardy Index Examples    
    ####### Be sure to change XXXX to correct names
    ####### Section Labels can't have dashes(-)
    ########################################################
    # AlarmDynamoDBReadThrottleEventsXXXX:
    #   Type: 'AWS::CloudWatch::Alarm'
    #   Properties:
    #     ActionsEnabled: true
    #     AlarmActions:
    #       - ${self:custom.topicArn}
    #     AlarmDescription: ${self:custom.apiName} DynamoDB Read Throttle Events for XXXX-index
    #     AlarmName: ${self:custom.apiName}-dynamodb-read-throttle-EventsXXXX
    #     ComparisonOperator: GreaterThanThreshold
    #     Dimensions:
    #       - Name: TableName
    #         Value: ${self:custom.tableName}
    #       - Name: GlobalSecondaryIndexName
    #         Value: XXXX-index
    #     EvaluationPeriods: 1
    #     MetricName: ReadThrottleEvents
    #     Namespace: AWS/DynamoDB
    #     Period: 60
    #     Statistic: Sum #SampleCount, Average, Sum, Minimum, or Maximum
    #     Threshold: 0
    #     TreatMissingData: notBreaching
    # AlarmDynamoDBWriteThrottleEventsXXXX:
    #   Type: 'AWS::CloudWatch::Alarm'
    #   Properties:
    #     ActionsEnabled: true
    #     AlarmActions:
    #       - ${self:custom.topicArn}
    #     AlarmDescription: ${self:custom.apiName} DynamoDB Write Throttle Events for XXXX-index
    #     AlarmName: ${self:custom.apiName}-dynamodb-write-throttle-EventsXXXX
    #     ComparisonOperator: GreaterThanThreshold
    #     Dimensions:
    #       - Name: TableName
    #         Value: ${self:custom.tableName}
    #       - Name: GlobalSecondaryIndexName
    #         Value: XXXX-index
    #     EvaluationPeriods: 1
    #     MetricName: WriteThrottleEvents
    #     Namespace: AWS/DynamoDB
    #     Period: 60
    #     Statistic: Sum #SampleCount, Average, Sum, Minimum, or Maximum
    #     Threshold: 0
    #     TreatMissingData: notBreaching