service: ItemService

functions:
  ItemService:
    environment:
      TABLE: 'ItemService'
      NS_DOMAIN: ${self:custom.nuskin-domains.${self:custom.stage}}
    handler: src/index.handler
    events:
     - http:
        path: /{id}
        method: get
        cors: true
        request:
          parameters:
            paths:
              id: true
     - http:
        path: /
        method: post
        cors: true
     - http:
        path: /{id}
        method: delete
        cors: true
        request:
          parameters:
            paths:
              userId: true



provider:
  name: aws
  runtime: nodejs6.10
  endpointType: regional
  region: ${env:REGION, 'us-west-2'}
  stage: ${opt:stage, 'sandbox'}
  envir:  ${env:DEP_ENVIRONMENT, 'dev'}
  tracing: true
  environment:
    AWS_XRAY_CONTEXT_MISSING: LOG_ERROR
    NODE_ENV: ${opt:stage, 'dev'}
  deploymentBucket:
    name: ${self:provider.envir}-${self:provider.region}-nuskin-sls
    # serverSideEncryption: AES256 # when using server-side encryption


  iamRoleStatements: # permissions for all of your functions can be set here
    - Effect: Allow
      Action: # Gives permission to DynamoDB tables in a specific region
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${self:provider.stage}:*:*"
    - Effect: "Allow" # xray permissions (required)
      Action:
        - "xray:PutTraceSegments"
        - "xray:PutTelemetryRecords"
      Resource:
        - "*"


custom:
  stage: ${opt:stage, self:provider.stage}
  api-domains:
    prod: api.cloud.nuskin.com
    stage: stageapi.cloud.nuskin.com
    test: testapi.cloud.nuskin.com
    dev: devapi.cloud.nuskin.com
    sandbox: api.nuskin.io

  customDomain:
      basePath: 'ItemService'
      domainName: ${self:custom.domains.${self:custom.stage}}
      stage: '${self:custom.stage}'
#      certificateName: '*.cloud.nuskin.com'
      endpointType: 'regional'
      createRoute53Record: false

  logARN:
    prod: arn:aws:lambda:us-west-2:878096462359:function:LogsToES-prod-LogsToES
    stage: arn:aws:lambda:us-west-2:453549906622:function:LogsToES-stage-LogsToES
    test: arn:aws:lambda:us-west-2:105371274045:function:LogsToES-test-LogsToES
    dev: arn:aws:lambda:us-west-2:140547422257:function:LogsToES-dev-LogsToES
    sandbox: arn:aws:lambda:us-west-2:140547422257:function:LogsToES-dev-LogsToES

  logForwarding:
    destinationARN: ${self:custom.logARN.${self:custom.stage}}
    filterPattern: '[timestamp=*Z, request_id="*-*", event]'



plugins:
  - serverless-offline
  - serverless-plugin-tracing
  - serverless-domain-manager
  - serverless-aws-alias
  - serverless-log-forwarding





