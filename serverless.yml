service: 
  name: ItemService

provider:
  name: aws
  runtime: nodejs8.10
  endpointType: regional
  region: ${opt:region, 'us-west-2'}
  stage: ${opt:stage, 'dev'}
  logRetentionInDays: 30
  tracing: true
  basePath: 'item' #This is the path  ***** PLEASE SET
  environment:
    AWS_XRAY_CONTEXT_MISSING: LOG_ERROR
    NODE_ENV: ${opt:stage, 'dev'}
    TABLE: 'Items'  #This is the DyanmoDB Table name  ***** PLEASE SET
  deploymentBucket:
    name: ${self:provider.stage}-${self:provider.region}-nuskin-sls

  iamRoleStatements: # permissions for all of your functions can be set here
    - Effect: Allow
      Action: # Gives permission to DynamoDB tables in a specific region
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TABLE}*"
    - Effect: "Allow"
      Action:
        - "xray:PutTraceSegments"
        - "xray:PutTelemetryRecords"
      Resource:
        - "*"

resources:
  Resources:
    ####################################################
    ###Remove section if not creating DynamoDB tables###
    ####################################################
    DynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TABLE}
        SSESpecification:
          SSEEnabled: true
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        AttributeDefinitions:
          - AttributeName: country
            AttributeType: S
        KeySchema:
          - AttributeName: country
            KeyType: HASH
        ProvisionedThroughput:    ##These should match the minimum numbers in the Autoscaling section
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    ####################################################

    ##############################################
    ## Used for Enabling Metics on API Stage    ##
    ##############################################
    ApiGatewayStage:
      Type: AWS::ApiGateway::Stage
      Properties:
        DeploymentId:
          Ref: __deployment__ # provided by serverless-plugin-bind-deployment-id
        RestApiId:
          Ref: ApiGatewayRestApi
        StageName : ${self:provider.stage}
        MethodSettings:
          - HttpMethod: "*"
            LoggingLevel: INFO
            MetricsEnabled: true
            ResourcePath: "/*"
            
functions:
  MicroService-sns:  #This is the name of your SNS Lambda Function  ***** PLEASE CHANGE
    handler: src/index.snsProductInfo
    events:
      - sns: arn:aws:sns:${self:provider.region}:#{AWS::AccountId}:MicroService   #This is the ARN of your SNS Topic  ***** PLEASE CHANGE LAST NAME

  MicroService: #This is the name of your Lambda Function  ***** PLEASE CHANGE
    handler: src/index.handler
    events:
     - http:
        path: /{id}
        method: get
        cors:
          origin: '*'
          headers:
            - '*'
          allowCredentials: false
        request:
          parameters:
            paths:
              id: true
        ####################################################
        ### Section used for the custom authorizer       ###
        ### See Custom Authorizer's README for details   ###
        ### Remove/Update as Needed                      ###
        ####################################################
        authorizer:
          arn: ${ssm:/global/identifiedAuthorizer}
          resultTtlInSeconds: 600
          identitySource: method.request.header.Authorization
          type: request
        ####################################################
     - http:
        path: /
        method: post
        cors:
          origin: '*'
          headers:
            - '*'
          allowCredentials: false
     - http:
        path: /{id}
        method: delete
        cors:
          origin: '*'
          headers:
            - '*'
          allowCredentials: false
        request:
          parameters:
            paths:
              userId: true


#CI/CD Deployment configuration update with caution
custom:
  ##Used so servless-offline has the same path as after deploying to the gateway
  serverless-offline:
    prefix: ${self:provider.basePath}

  ###Used for Assigning Function to Custom API Domain
  customDomain:
      basePath: ${self:provider.basePath}
      domainName: ${ssm:/global/apidomain}
      stage: ${self:provider.stage}
      certificateName: '*.cloud.nuskin.com'
      endpointType: 'regional'
      createRoute53Record: false

  ###Used for Automatically subscribing cloudwatch Lambda logs to ElasticSearch Service Lambda
  logForwarding:
    destinationARN: ${ssm:/global/logarn}
    filterPattern: '[timestamp=*Z, request_id="*-*", event]'

  #############################################################
  ###Used for Setting up DynamoDB Autoscaling               ###
  ###Remove section if not creating DynamoDB tables         ###
  #############################################################
  capacities:
    - table: DynamoDBTable  # DynamoDB Resource Name - Not the Table Name

      #########################################################################
      ### Below is needed to setup autoscaling on each index you have setup ###
      ### Make sure you put the correct index names                         ###
      ### UnComment and correct Index names as needed                       ###
      #########################################################################
      # index:                                        # List or single index name
      #   - federatedId-index
      #   - accountId-index

      #########################################################################
      ### These numbers apply across the table and any indexes listed above ###
      ### Make sure you apply the correct capacity numbers.                 ###
      ### Total RCU and WCU capacity costs include table and all indexes    ###
      ### 1000 WCU * (1 Table + 2 Indexes) = 3000 WCU    So be Careful      ###
      #########################################################################
      read:
        minimum: 5        # Minimum read capacity
        maximum: 999      # Maximum read capacity
        usage: 0.75       # Targeted usage percentage
      write:
        minimum: 5        # Minimum write capacity
        maximum: 999      # Maximum write capacity
        usage:  0.75      # Targeted usage percentage
 
plugins:
  - serverless-offline
  - serverless-domain-manager
  - serverless-plugin-tracing
  - serverless-log-forwarding
  - serverless-dynamodb-autoscaling
  - serverless-pseudo-parameters
  - serverless-prune-plugin
  - serverless-plugin-bind-deployment-id
package:
  exclude:
    - .idea/**
    - .nyc_output/**
    - "*.iml"
    - buildspec.yml
    - coverage/**
    - LICENSE
    - mochawesome-report/**
    - qa-dashboard.sh
    - README.md
    - swagger.yml
    - template.yml
    - test/**
